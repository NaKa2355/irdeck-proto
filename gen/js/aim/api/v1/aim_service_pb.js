// source: aim/api/v1/aim_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var aim_api_v1_button_pb = require('../../../aim/api/v1/button_pb.js');
goog.object.extend(proto, aim_api_v1_button_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var aim_api_v1_remote_pb = require('../../../aim/api/v1/remote_pb.js');
goog.object.extend(proto, aim_api_v1_remote_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.aim.AddButtonRemoteRequest', null, global);
goog.exportSymbol('proto.aim.AddButtonRequest', null, global);
goog.exportSymbol('proto.aim.AddCustomRemoteRequest', null, global);
goog.exportSymbol('proto.aim.AddRemoteRequest', null, global);
goog.exportSymbol('proto.aim.AddRemoteRequest.RemoteCase', null, global);
goog.exportSymbol('proto.aim.AddRemoteResponse', null, global);
goog.exportSymbol('proto.aim.AddThermostatRemoteRequest', null, global);
goog.exportSymbol('proto.aim.AddToggleRemoteRequest', null, global);
goog.exportSymbol('proto.aim.DeleteButtonRequest', null, global);
goog.exportSymbol('proto.aim.DeleteRemoteRequest', null, global);
goog.exportSymbol('proto.aim.EditButtonRequest', null, global);
goog.exportSymbol('proto.aim.EditRemoteRequest', null, global);
goog.exportSymbol('proto.aim.GetButtonsRequest', null, global);
goog.exportSymbol('proto.aim.GetButtonsResponse', null, global);
goog.exportSymbol('proto.aim.GetIrDataRequest', null, global);
goog.exportSymbol('proto.aim.GetRemoteRequest', null, global);
goog.exportSymbol('proto.aim.GetRemoteResponse', null, global);
goog.exportSymbol('proto.aim.GetRemotesResponse', null, global);
goog.exportSymbol('proto.aim.RemoteUpdateNotification', null, global);
goog.exportSymbol('proto.aim.RemoteUpdateNotification.UpdateType', null, global);
goog.exportSymbol('proto.aim.SetIRDataRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.AddCustomRemoteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.AddCustomRemoteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.AddCustomRemoteRequest.displayName = 'proto.aim.AddCustomRemoteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.AddToggleRemoteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.AddToggleRemoteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.AddToggleRemoteRequest.displayName = 'proto.aim.AddToggleRemoteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.AddButtonRemoteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.AddButtonRemoteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.AddButtonRemoteRequest.displayName = 'proto.aim.AddButtonRemoteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.AddThermostatRemoteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.AddThermostatRemoteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.AddThermostatRemoteRequest.displayName = 'proto.aim.AddThermostatRemoteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.AddRemoteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.aim.AddRemoteRequest.oneofGroups_);
};
goog.inherits(proto.aim.AddRemoteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.AddRemoteRequest.displayName = 'proto.aim.AddRemoteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.AddRemoteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.AddRemoteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.AddRemoteResponse.displayName = 'proto.aim.AddRemoteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.AddButtonRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.AddButtonRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.AddButtonRequest.displayName = 'proto.aim.AddButtonRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.GetRemotesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aim.GetRemotesResponse.repeatedFields_, null);
};
goog.inherits(proto.aim.GetRemotesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.GetRemotesResponse.displayName = 'proto.aim.GetRemotesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.GetRemoteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.GetRemoteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.GetRemoteRequest.displayName = 'proto.aim.GetRemoteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.GetRemoteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.GetRemoteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.GetRemoteResponse.displayName = 'proto.aim.GetRemoteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.GetButtonsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.GetButtonsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.GetButtonsRequest.displayName = 'proto.aim.GetButtonsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.GetButtonsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aim.GetButtonsResponse.repeatedFields_, null);
};
goog.inherits(proto.aim.GetButtonsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.GetButtonsResponse.displayName = 'proto.aim.GetButtonsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.EditRemoteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.EditRemoteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.EditRemoteRequest.displayName = 'proto.aim.EditRemoteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.EditButtonRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.EditButtonRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.EditButtonRequest.displayName = 'proto.aim.EditButtonRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.DeleteRemoteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.DeleteRemoteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.DeleteRemoteRequest.displayName = 'proto.aim.DeleteRemoteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.DeleteButtonRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.DeleteButtonRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.DeleteButtonRequest.displayName = 'proto.aim.DeleteButtonRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.GetIrDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.GetIrDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.GetIrDataRequest.displayName = 'proto.aim.GetIrDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.SetIRDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.SetIRDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.SetIRDataRequest.displayName = 'proto.aim.SetIRDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aim.RemoteUpdateNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aim.RemoteUpdateNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aim.RemoteUpdateNotification.displayName = 'proto.aim.RemoteUpdateNotification';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.AddCustomRemoteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.AddCustomRemoteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.AddCustomRemoteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddCustomRemoteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.AddCustomRemoteRequest}
 */
proto.aim.AddCustomRemoteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.AddCustomRemoteRequest;
  return proto.aim.AddCustomRemoteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.AddCustomRemoteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.AddCustomRemoteRequest}
 */
proto.aim.AddCustomRemoteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.AddCustomRemoteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.AddCustomRemoteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.AddCustomRemoteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddCustomRemoteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.aim.AddCustomRemoteRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.AddCustomRemoteRequest} returns this
 */
proto.aim.AddCustomRemoteRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.aim.AddCustomRemoteRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.AddCustomRemoteRequest} returns this
 */
proto.aim.AddCustomRemoteRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.AddToggleRemoteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.AddToggleRemoteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.AddToggleRemoteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddToggleRemoteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.AddToggleRemoteRequest}
 */
proto.aim.AddToggleRemoteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.AddToggleRemoteRequest;
  return proto.aim.AddToggleRemoteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.AddToggleRemoteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.AddToggleRemoteRequest}
 */
proto.aim.AddToggleRemoteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.AddToggleRemoteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.AddToggleRemoteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.AddToggleRemoteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddToggleRemoteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.aim.AddToggleRemoteRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.AddToggleRemoteRequest} returns this
 */
proto.aim.AddToggleRemoteRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.aim.AddToggleRemoteRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.AddToggleRemoteRequest} returns this
 */
proto.aim.AddToggleRemoteRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.AddButtonRemoteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.AddButtonRemoteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.AddButtonRemoteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddButtonRemoteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.AddButtonRemoteRequest}
 */
proto.aim.AddButtonRemoteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.AddButtonRemoteRequest;
  return proto.aim.AddButtonRemoteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.AddButtonRemoteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.AddButtonRemoteRequest}
 */
proto.aim.AddButtonRemoteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.AddButtonRemoteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.AddButtonRemoteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.AddButtonRemoteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddButtonRemoteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.aim.AddButtonRemoteRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.AddButtonRemoteRequest} returns this
 */
proto.aim.AddButtonRemoteRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.aim.AddButtonRemoteRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.AddButtonRemoteRequest} returns this
 */
proto.aim.AddButtonRemoteRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.AddThermostatRemoteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.AddThermostatRemoteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.AddThermostatRemoteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddThermostatRemoteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    maximumHeatingTemp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minimumHeatingTemp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maximumCoolingTemp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    minimumCoolingTemp: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.AddThermostatRemoteRequest}
 */
proto.aim.AddThermostatRemoteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.AddThermostatRemoteRequest;
  return proto.aim.AddThermostatRemoteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.AddThermostatRemoteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.AddThermostatRemoteRequest}
 */
proto.aim.AddThermostatRemoteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumHeatingTemp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinimumHeatingTemp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumCoolingTemp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinimumCoolingTemp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.AddThermostatRemoteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.AddThermostatRemoteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.AddThermostatRemoteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddThermostatRemoteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScale();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getMaximumHeatingTemp();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMinimumHeatingTemp();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMaximumCoolingTemp();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMinimumCoolingTemp();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.aim.AddThermostatRemoteRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.AddThermostatRemoteRequest} returns this
 */
proto.aim.AddThermostatRemoteRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.aim.AddThermostatRemoteRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.AddThermostatRemoteRequest} returns this
 */
proto.aim.AddThermostatRemoteRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float scale = 3;
 * @return {number}
 */
proto.aim.AddThermostatRemoteRequest.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.aim.AddThermostatRemoteRequest} returns this
 */
proto.aim.AddThermostatRemoteRequest.prototype.setScale = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional uint32 maximum_heating_temp = 4;
 * @return {number}
 */
proto.aim.AddThermostatRemoteRequest.prototype.getMaximumHeatingTemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aim.AddThermostatRemoteRequest} returns this
 */
proto.aim.AddThermostatRemoteRequest.prototype.setMaximumHeatingTemp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 minimum_heating_temp = 5;
 * @return {number}
 */
proto.aim.AddThermostatRemoteRequest.prototype.getMinimumHeatingTemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.aim.AddThermostatRemoteRequest} returns this
 */
proto.aim.AddThermostatRemoteRequest.prototype.setMinimumHeatingTemp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 maximum_cooling_temp = 6;
 * @return {number}
 */
proto.aim.AddThermostatRemoteRequest.prototype.getMaximumCoolingTemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.aim.AddThermostatRemoteRequest} returns this
 */
proto.aim.AddThermostatRemoteRequest.prototype.setMaximumCoolingTemp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 minimum_cooling_temp = 7;
 * @return {number}
 */
proto.aim.AddThermostatRemoteRequest.prototype.getMinimumCoolingTemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.aim.AddThermostatRemoteRequest} returns this
 */
proto.aim.AddThermostatRemoteRequest.prototype.setMinimumCoolingTemp = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.aim.AddRemoteRequest.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.aim.AddRemoteRequest.RemoteCase = {
  REMOTE_NOT_SET: 0,
  CUSTOM: 1,
  TOGGLE: 2,
  BUTTON: 3,
  THERMOSTAT: 4
};

/**
 * @return {proto.aim.AddRemoteRequest.RemoteCase}
 */
proto.aim.AddRemoteRequest.prototype.getRemoteCase = function() {
  return /** @type {proto.aim.AddRemoteRequest.RemoteCase} */(jspb.Message.computeOneofCase(this, proto.aim.AddRemoteRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.AddRemoteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.AddRemoteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.AddRemoteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddRemoteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    custom: (f = msg.getCustom()) && proto.aim.AddCustomRemoteRequest.toObject(includeInstance, f),
    toggle: (f = msg.getToggle()) && proto.aim.AddToggleRemoteRequest.toObject(includeInstance, f),
    button: (f = msg.getButton()) && proto.aim.AddButtonRemoteRequest.toObject(includeInstance, f),
    thermostat: (f = msg.getThermostat()) && proto.aim.AddThermostatRemoteRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.AddRemoteRequest}
 */
proto.aim.AddRemoteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.AddRemoteRequest;
  return proto.aim.AddRemoteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.AddRemoteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.AddRemoteRequest}
 */
proto.aim.AddRemoteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.aim.AddCustomRemoteRequest;
      reader.readMessage(value,proto.aim.AddCustomRemoteRequest.deserializeBinaryFromReader);
      msg.setCustom(value);
      break;
    case 2:
      var value = new proto.aim.AddToggleRemoteRequest;
      reader.readMessage(value,proto.aim.AddToggleRemoteRequest.deserializeBinaryFromReader);
      msg.setToggle(value);
      break;
    case 3:
      var value = new proto.aim.AddButtonRemoteRequest;
      reader.readMessage(value,proto.aim.AddButtonRemoteRequest.deserializeBinaryFromReader);
      msg.setButton(value);
      break;
    case 4:
      var value = new proto.aim.AddThermostatRemoteRequest;
      reader.readMessage(value,proto.aim.AddThermostatRemoteRequest.deserializeBinaryFromReader);
      msg.setThermostat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.AddRemoteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.AddRemoteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.AddRemoteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddRemoteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCustom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.aim.AddCustomRemoteRequest.serializeBinaryToWriter
    );
  }
  f = message.getToggle();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.aim.AddToggleRemoteRequest.serializeBinaryToWriter
    );
  }
  f = message.getButton();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.aim.AddButtonRemoteRequest.serializeBinaryToWriter
    );
  }
  f = message.getThermostat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.aim.AddThermostatRemoteRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional AddCustomRemoteRequest custom = 1;
 * @return {?proto.aim.AddCustomRemoteRequest}
 */
proto.aim.AddRemoteRequest.prototype.getCustom = function() {
  return /** @type{?proto.aim.AddCustomRemoteRequest} */ (
    jspb.Message.getWrapperField(this, proto.aim.AddCustomRemoteRequest, 1));
};


/**
 * @param {?proto.aim.AddCustomRemoteRequest|undefined} value
 * @return {!proto.aim.AddRemoteRequest} returns this
*/
proto.aim.AddRemoteRequest.prototype.setCustom = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.aim.AddRemoteRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aim.AddRemoteRequest} returns this
 */
proto.aim.AddRemoteRequest.prototype.clearCustom = function() {
  return this.setCustom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aim.AddRemoteRequest.prototype.hasCustom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AddToggleRemoteRequest toggle = 2;
 * @return {?proto.aim.AddToggleRemoteRequest}
 */
proto.aim.AddRemoteRequest.prototype.getToggle = function() {
  return /** @type{?proto.aim.AddToggleRemoteRequest} */ (
    jspb.Message.getWrapperField(this, proto.aim.AddToggleRemoteRequest, 2));
};


/**
 * @param {?proto.aim.AddToggleRemoteRequest|undefined} value
 * @return {!proto.aim.AddRemoteRequest} returns this
*/
proto.aim.AddRemoteRequest.prototype.setToggle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.aim.AddRemoteRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aim.AddRemoteRequest} returns this
 */
proto.aim.AddRemoteRequest.prototype.clearToggle = function() {
  return this.setToggle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aim.AddRemoteRequest.prototype.hasToggle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AddButtonRemoteRequest button = 3;
 * @return {?proto.aim.AddButtonRemoteRequest}
 */
proto.aim.AddRemoteRequest.prototype.getButton = function() {
  return /** @type{?proto.aim.AddButtonRemoteRequest} */ (
    jspb.Message.getWrapperField(this, proto.aim.AddButtonRemoteRequest, 3));
};


/**
 * @param {?proto.aim.AddButtonRemoteRequest|undefined} value
 * @return {!proto.aim.AddRemoteRequest} returns this
*/
proto.aim.AddRemoteRequest.prototype.setButton = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.aim.AddRemoteRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aim.AddRemoteRequest} returns this
 */
proto.aim.AddRemoteRequest.prototype.clearButton = function() {
  return this.setButton(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aim.AddRemoteRequest.prototype.hasButton = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AddThermostatRemoteRequest thermostat = 4;
 * @return {?proto.aim.AddThermostatRemoteRequest}
 */
proto.aim.AddRemoteRequest.prototype.getThermostat = function() {
  return /** @type{?proto.aim.AddThermostatRemoteRequest} */ (
    jspb.Message.getWrapperField(this, proto.aim.AddThermostatRemoteRequest, 4));
};


/**
 * @param {?proto.aim.AddThermostatRemoteRequest|undefined} value
 * @return {!proto.aim.AddRemoteRequest} returns this
*/
proto.aim.AddRemoteRequest.prototype.setThermostat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.aim.AddRemoteRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aim.AddRemoteRequest} returns this
 */
proto.aim.AddRemoteRequest.prototype.clearThermostat = function() {
  return this.setThermostat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aim.AddRemoteRequest.prototype.hasThermostat = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.AddRemoteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.AddRemoteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.AddRemoteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddRemoteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    remote: (f = msg.getRemote()) && aim_api_v1_remote_pb.Remote.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.AddRemoteResponse}
 */
proto.aim.AddRemoteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.AddRemoteResponse;
  return proto.aim.AddRemoteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.AddRemoteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.AddRemoteResponse}
 */
proto.aim.AddRemoteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new aim_api_v1_remote_pb.Remote;
      reader.readMessage(value,aim_api_v1_remote_pb.Remote.deserializeBinaryFromReader);
      msg.setRemote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.AddRemoteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.AddRemoteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.AddRemoteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddRemoteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemote();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      aim_api_v1_remote_pb.Remote.serializeBinaryToWriter
    );
  }
};


/**
 * optional Remote remote = 1;
 * @return {?proto.aim.Remote}
 */
proto.aim.AddRemoteResponse.prototype.getRemote = function() {
  return /** @type{?proto.aim.Remote} */ (
    jspb.Message.getWrapperField(this, aim_api_v1_remote_pb.Remote, 1));
};


/**
 * @param {?proto.aim.Remote|undefined} value
 * @return {!proto.aim.AddRemoteResponse} returns this
*/
proto.aim.AddRemoteResponse.prototype.setRemote = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aim.AddRemoteResponse} returns this
 */
proto.aim.AddRemoteResponse.prototype.clearRemote = function() {
  return this.setRemote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aim.AddRemoteResponse.prototype.hasRemote = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.AddButtonRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.AddButtonRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.AddButtonRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddButtonRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.AddButtonRequest}
 */
proto.aim.AddButtonRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.AddButtonRequest;
  return proto.aim.AddButtonRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.AddButtonRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.AddButtonRequest}
 */
proto.aim.AddButtonRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.AddButtonRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.AddButtonRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.AddButtonRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.AddButtonRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string remote_id = 1;
 * @return {string}
 */
proto.aim.AddButtonRequest.prototype.getRemoteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.AddButtonRequest} returns this
 */
proto.aim.AddButtonRequest.prototype.setRemoteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.aim.AddButtonRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.AddButtonRequest} returns this
 */
proto.aim.AddButtonRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aim.GetRemotesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.GetRemotesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.GetRemotesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.GetRemotesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetRemotesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    remotesList: jspb.Message.toObjectList(msg.getRemotesList(),
    aim_api_v1_remote_pb.Remote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.GetRemotesResponse}
 */
proto.aim.GetRemotesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.GetRemotesResponse;
  return proto.aim.GetRemotesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.GetRemotesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.GetRemotesResponse}
 */
proto.aim.GetRemotesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new aim_api_v1_remote_pb.Remote;
      reader.readMessage(value,aim_api_v1_remote_pb.Remote.deserializeBinaryFromReader);
      msg.addRemotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.GetRemotesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.GetRemotesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.GetRemotesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetRemotesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      aim_api_v1_remote_pb.Remote.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Remote remotes = 1;
 * @return {!Array<!proto.aim.Remote>}
 */
proto.aim.GetRemotesResponse.prototype.getRemotesList = function() {
  return /** @type{!Array<!proto.aim.Remote>} */ (
    jspb.Message.getRepeatedWrapperField(this, aim_api_v1_remote_pb.Remote, 1));
};


/**
 * @param {!Array<!proto.aim.Remote>} value
 * @return {!proto.aim.GetRemotesResponse} returns this
*/
proto.aim.GetRemotesResponse.prototype.setRemotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.aim.Remote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aim.Remote}
 */
proto.aim.GetRemotesResponse.prototype.addRemotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.aim.Remote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aim.GetRemotesResponse} returns this
 */
proto.aim.GetRemotesResponse.prototype.clearRemotesList = function() {
  return this.setRemotesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.GetRemoteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.GetRemoteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.GetRemoteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetRemoteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.GetRemoteRequest}
 */
proto.aim.GetRemoteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.GetRemoteRequest;
  return proto.aim.GetRemoteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.GetRemoteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.GetRemoteRequest}
 */
proto.aim.GetRemoteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.GetRemoteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.GetRemoteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.GetRemoteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetRemoteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string remote_id = 1;
 * @return {string}
 */
proto.aim.GetRemoteRequest.prototype.getRemoteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.GetRemoteRequest} returns this
 */
proto.aim.GetRemoteRequest.prototype.setRemoteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.GetRemoteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.GetRemoteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.GetRemoteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetRemoteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    remote: (f = msg.getRemote()) && aim_api_v1_remote_pb.Remote.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.GetRemoteResponse}
 */
proto.aim.GetRemoteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.GetRemoteResponse;
  return proto.aim.GetRemoteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.GetRemoteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.GetRemoteResponse}
 */
proto.aim.GetRemoteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new aim_api_v1_remote_pb.Remote;
      reader.readMessage(value,aim_api_v1_remote_pb.Remote.deserializeBinaryFromReader);
      msg.setRemote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.GetRemoteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.GetRemoteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.GetRemoteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetRemoteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemote();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      aim_api_v1_remote_pb.Remote.serializeBinaryToWriter
    );
  }
};


/**
 * optional Remote remote = 1;
 * @return {?proto.aim.Remote}
 */
proto.aim.GetRemoteResponse.prototype.getRemote = function() {
  return /** @type{?proto.aim.Remote} */ (
    jspb.Message.getWrapperField(this, aim_api_v1_remote_pb.Remote, 1));
};


/**
 * @param {?proto.aim.Remote|undefined} value
 * @return {!proto.aim.GetRemoteResponse} returns this
*/
proto.aim.GetRemoteResponse.prototype.setRemote = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aim.GetRemoteResponse} returns this
 */
proto.aim.GetRemoteResponse.prototype.clearRemote = function() {
  return this.setRemote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aim.GetRemoteResponse.prototype.hasRemote = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.GetButtonsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.GetButtonsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.GetButtonsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetButtonsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.GetButtonsRequest}
 */
proto.aim.GetButtonsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.GetButtonsRequest;
  return proto.aim.GetButtonsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.GetButtonsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.GetButtonsRequest}
 */
proto.aim.GetButtonsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.GetButtonsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.GetButtonsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.GetButtonsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetButtonsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string remote_id = 1;
 * @return {string}
 */
proto.aim.GetButtonsRequest.prototype.getRemoteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.GetButtonsRequest} returns this
 */
proto.aim.GetButtonsRequest.prototype.setRemoteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aim.GetButtonsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.GetButtonsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.GetButtonsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.GetButtonsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetButtonsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    buttonsList: jspb.Message.toObjectList(msg.getButtonsList(),
    aim_api_v1_button_pb.Button.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.GetButtonsResponse}
 */
proto.aim.GetButtonsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.GetButtonsResponse;
  return proto.aim.GetButtonsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.GetButtonsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.GetButtonsResponse}
 */
proto.aim.GetButtonsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new aim_api_v1_button_pb.Button;
      reader.readMessage(value,aim_api_v1_button_pb.Button.deserializeBinaryFromReader);
      msg.addButtons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.GetButtonsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.GetButtonsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.GetButtonsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetButtonsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getButtonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      aim_api_v1_button_pb.Button.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Button buttons = 1;
 * @return {!Array<!proto.aim.Button>}
 */
proto.aim.GetButtonsResponse.prototype.getButtonsList = function() {
  return /** @type{!Array<!proto.aim.Button>} */ (
    jspb.Message.getRepeatedWrapperField(this, aim_api_v1_button_pb.Button, 1));
};


/**
 * @param {!Array<!proto.aim.Button>} value
 * @return {!proto.aim.GetButtonsResponse} returns this
*/
proto.aim.GetButtonsResponse.prototype.setButtonsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.aim.Button=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aim.Button}
 */
proto.aim.GetButtonsResponse.prototype.addButtons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.aim.Button, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aim.GetButtonsResponse} returns this
 */
proto.aim.GetButtonsResponse.prototype.clearButtonsList = function() {
  return this.setButtonsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.EditRemoteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.EditRemoteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.EditRemoteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.EditRemoteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.EditRemoteRequest}
 */
proto.aim.EditRemoteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.EditRemoteRequest;
  return proto.aim.EditRemoteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.EditRemoteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.EditRemoteRequest}
 */
proto.aim.EditRemoteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.EditRemoteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.EditRemoteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.EditRemoteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.EditRemoteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string remote_id = 1;
 * @return {string}
 */
proto.aim.EditRemoteRequest.prototype.getRemoteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.EditRemoteRequest} returns this
 */
proto.aim.EditRemoteRequest.prototype.setRemoteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.aim.EditRemoteRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.EditRemoteRequest} returns this
 */
proto.aim.EditRemoteRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string device_id = 3;
 * @return {string}
 */
proto.aim.EditRemoteRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.EditRemoteRequest} returns this
 */
proto.aim.EditRemoteRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.EditButtonRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.EditButtonRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.EditButtonRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.EditButtonRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    buttonId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.EditButtonRequest}
 */
proto.aim.EditButtonRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.EditButtonRequest;
  return proto.aim.EditButtonRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.EditButtonRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.EditButtonRequest}
 */
proto.aim.EditButtonRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setButtonId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.EditButtonRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.EditButtonRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.EditButtonRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.EditButtonRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getButtonId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string remote_id = 1;
 * @return {string}
 */
proto.aim.EditButtonRequest.prototype.getRemoteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.EditButtonRequest} returns this
 */
proto.aim.EditButtonRequest.prototype.setRemoteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string button_id = 2;
 * @return {string}
 */
proto.aim.EditButtonRequest.prototype.getButtonId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.EditButtonRequest} returns this
 */
proto.aim.EditButtonRequest.prototype.setButtonId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.aim.EditButtonRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.EditButtonRequest} returns this
 */
proto.aim.EditButtonRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.DeleteRemoteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.DeleteRemoteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.DeleteRemoteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.DeleteRemoteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.DeleteRemoteRequest}
 */
proto.aim.DeleteRemoteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.DeleteRemoteRequest;
  return proto.aim.DeleteRemoteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.DeleteRemoteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.DeleteRemoteRequest}
 */
proto.aim.DeleteRemoteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.DeleteRemoteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.DeleteRemoteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.DeleteRemoteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.DeleteRemoteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string remote_id = 1;
 * @return {string}
 */
proto.aim.DeleteRemoteRequest.prototype.getRemoteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.DeleteRemoteRequest} returns this
 */
proto.aim.DeleteRemoteRequest.prototype.setRemoteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.DeleteButtonRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.DeleteButtonRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.DeleteButtonRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.DeleteButtonRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    buttonId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.DeleteButtonRequest}
 */
proto.aim.DeleteButtonRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.DeleteButtonRequest;
  return proto.aim.DeleteButtonRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.DeleteButtonRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.DeleteButtonRequest}
 */
proto.aim.DeleteButtonRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setButtonId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.DeleteButtonRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.DeleteButtonRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.DeleteButtonRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.DeleteButtonRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getButtonId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string remote_id = 1;
 * @return {string}
 */
proto.aim.DeleteButtonRequest.prototype.getRemoteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.DeleteButtonRequest} returns this
 */
proto.aim.DeleteButtonRequest.prototype.setRemoteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string button_id = 2;
 * @return {string}
 */
proto.aim.DeleteButtonRequest.prototype.getButtonId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.DeleteButtonRequest} returns this
 */
proto.aim.DeleteButtonRequest.prototype.setButtonId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.GetIrDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.GetIrDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.GetIrDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetIrDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    buttonId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.GetIrDataRequest}
 */
proto.aim.GetIrDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.GetIrDataRequest;
  return proto.aim.GetIrDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.GetIrDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.GetIrDataRequest}
 */
proto.aim.GetIrDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setButtonId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.GetIrDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.GetIrDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.GetIrDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.GetIrDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getButtonId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string remote_id = 1;
 * @return {string}
 */
proto.aim.GetIrDataRequest.prototype.getRemoteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.GetIrDataRequest} returns this
 */
proto.aim.GetIrDataRequest.prototype.setRemoteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string button_id = 2;
 * @return {string}
 */
proto.aim.GetIrDataRequest.prototype.getButtonId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.GetIrDataRequest} returns this
 */
proto.aim.GetIrDataRequest.prototype.setButtonId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.SetIRDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.SetIRDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.SetIRDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.SetIRDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    buttonId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    irdata: (f = msg.getIrdata()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.SetIRDataRequest}
 */
proto.aim.SetIRDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.SetIRDataRequest;
  return proto.aim.SetIRDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.SetIRDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.SetIRDataRequest}
 */
proto.aim.SetIRDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setButtonId(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setIrdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.SetIRDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.SetIRDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.SetIRDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.SetIRDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getButtonId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIrdata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string remote_id = 1;
 * @return {string}
 */
proto.aim.SetIRDataRequest.prototype.getRemoteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.SetIRDataRequest} returns this
 */
proto.aim.SetIRDataRequest.prototype.setRemoteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string button_id = 2;
 * @return {string}
 */
proto.aim.SetIRDataRequest.prototype.getButtonId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.SetIRDataRequest} returns this
 */
proto.aim.SetIRDataRequest.prototype.setButtonId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any irdata = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.aim.SetIRDataRequest.prototype.getIrdata = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.aim.SetIRDataRequest} returns this
*/
proto.aim.SetIRDataRequest.prototype.setIrdata = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aim.SetIRDataRequest} returns this
 */
proto.aim.SetIRDataRequest.prototype.clearIrdata = function() {
  return this.setIrdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aim.SetIRDataRequest.prototype.hasIrdata = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aim.RemoteUpdateNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.aim.RemoteUpdateNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aim.RemoteUpdateNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.RemoteUpdateNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    updateType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aim.RemoteUpdateNotification}
 */
proto.aim.RemoteUpdateNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aim.RemoteUpdateNotification;
  return proto.aim.RemoteUpdateNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aim.RemoteUpdateNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aim.RemoteUpdateNotification}
 */
proto.aim.RemoteUpdateNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteId(value);
      break;
    case 2:
      var value = /** @type {!proto.aim.RemoteUpdateNotification.UpdateType} */ (reader.readEnum());
      msg.setUpdateType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aim.RemoteUpdateNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aim.RemoteUpdateNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aim.RemoteUpdateNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aim.RemoteUpdateNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemoteId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUpdateType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.aim.RemoteUpdateNotification.UpdateType = {
  UPDATE_TYPE_UNSPECIFIED: 0,
  UPDATE_TYPE_ADD: 1,
  UPDATE_TYPE_DELETE: 2
};

/**
 * optional string remote_id = 1;
 * @return {string}
 */
proto.aim.RemoteUpdateNotification.prototype.getRemoteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aim.RemoteUpdateNotification} returns this
 */
proto.aim.RemoteUpdateNotification.prototype.setRemoteId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UpdateType update_type = 2;
 * @return {!proto.aim.RemoteUpdateNotification.UpdateType}
 */
proto.aim.RemoteUpdateNotification.prototype.getUpdateType = function() {
  return /** @type {!proto.aim.RemoteUpdateNotification.UpdateType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.aim.RemoteUpdateNotification.UpdateType} value
 * @return {!proto.aim.RemoteUpdateNotification} returns this
 */
proto.aim.RemoteUpdateNotification.prototype.setUpdateType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


goog.object.extend(exports, proto.aim);
